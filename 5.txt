5.NQueen
import java.util.Scanner;

public class NQueen {
    private static void printSolution(char[][] board, int N) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    private static boolean isSafe(char[][] board, int row, int col, int N) {
        for (int i = 0; i < col; i++) {
            if (board[row][i] == 'Q') {
                return false;
            }
        }

        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        for (int i = row, j = col; j >= 0 && i < N; i++, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }

    private static boolean solveNQueensUtil(char[][] board, int col, int N) {
        if (col >= N) {
            return true;
        }

        for (int i = 0; i < N; i++) {
            if (isSafe(board, i, col, N)) {
                board[i][col] = 'Q'; // Place the queen
                if (solveNQueensUtil(board, col + 1, N)) {
                    return true;
                }
                board[i][col] = 'X';
            }
        }
        return false;
    }

    public static boolean solveNQueens(int N) {
        char[][] board = new char[N][N];
        for (int i = 0; i < N; i++)
            for (int j = 0; j < N; j++)
                board[i][j] = 'X';
        if (!solveNQueensUtil(board, 0, N)) {
            System.out.println("No solution exists");
            return false;
        }
        printSolution(board, N);
        return true;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter number of vertices:");
        int N = scanner.nextInt();
        solveNQueens(N);
    }
}