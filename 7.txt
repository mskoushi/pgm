7.DAG


import java.util.*;

class DAG {
    private int V;
    private List<List<Pair>> adj;

    class Pair {
        int vertex;
        int weight;

        Pair(int vertex, int weight) {
            this.vertex = vertex;
            this.weight = weight;
        }
    }

    public DAG(int v) {
        V = v;
        adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
    }

    public void addEdge(int u, int v, int weight) {
        adj.get(u).add(new Pair(v, weight));
    }

    private void topologicalSortUtil(int v, boolean[] visited, Stack<Integer> stack) {
        visited[v] = true;
        for (Pair neighbor : adj.get(v)) {
            if (!visited[neighbor.vertex]) {
                topologicalSortUtil(neighbor.vertex, visited, stack);
            }
        }
        stack.push(v);
    }

    public void shortestPath(int source) {
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                topologicalSortUtil(i, visited, stack);
            }
        }

        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0;

        while (!stack.isEmpty()) {
            int u = stack.pop();

            for (Pair neighbor : adj.get(u)) {
                if (dist[u] != Integer.MAX_VALUE && dist[u] + neighbor.weight < dist[neighbor.vertex]) {
                    dist[neighbor.vertex] = dist[u] + neighbor.weight;
                }
            }
        }

        System.out.println("Vertex Distance from Source " + source);
        for (int i = 0; i < V; i++) {
            System.out.println(i + "\t\t" + (dist[i] == Integer.MAX_VALUE ? "âˆž" : dist[i]));
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of vertices: ");
        int V = scanner.nextInt();
        DAG graph = new DAG(V);
        System.out.print("Enter the number of edges: ");
        int E = scanner.nextInt();
        System.out.println("Enter each edge in the format 'u v weight' (0-based index):");
        for (int i = 0; i < E; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int weight = scanner.nextInt();
            graph.addEdge(u, v, weight);
        }
        System.out.print("Enter the source vertex: ");
        int source = scanner.nextInt();
        graph.shortestPath(source);
        scanner.close();
    }
}