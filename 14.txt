14.  Subset sum


import java.util.Scanner;

class Set {
    int n, d, sum, flag = 0;
    int[] S = new int[100];
    int[] x = new int[100];

    public void Read_Find() {
        Scanner in = new Scanner(System.in);

        System.out.print("Enter the size of set: ");
        n = in.nextInt();

        System.out.println("Enter the set elements ");
        for (int i = 1; i <= n; i++) {
            S[i] = in.nextInt();
        }

        System.out.print("Enter maximum sum: ");
        d = in.nextInt();
        System.out.println("The subsets which form sum " + d + " are:");

        for (int i = 1; i <= n; i++) {
            sum += S[i];
        }

        if (sum >= d) {
            sumofsub(0, 1, sum);
        }

        if (flag == 0) {
            System.out.println("{}");
        }
    }

    public void sumofsub(int s, int k, int r) {
        x[k] = 1;
        if (s + S[k] == d) {
            System.out.print("{ ");
            for (int i = 1; i <= n; i++) {
                if (x[i] == 1) {
                    System.out.print(S[i] + " ");
                    flag = 1;
                }
            }
            System.out.println("}");
        } else {
            if (s + S[k] + S[k + 1] <= d) {
                sumofsub(s + S[k], k + 1, r - S[k]);
                x[k + 1] = 0;
            }
            if ((s + r - S[k] >= d) && (s + S[k + 1] <= d)) {
                x[k] = 0;
                sumofsub(s, k + 1, r - S[k]);
                x[k + 1] = 0;
            }
        }
    }
}

public class SubsetSum {
    public static void main(String[] args) {
        Set s = new Set();
        s.Read_Find();
    }
}