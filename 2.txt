2.AVL
import java.util.Scanner;

class AVLNode {
    AVLNode left, right;
    int data;
    int height;

    // Constructor for AVLNode
    public AVLNode() {
        left = null;
        right = null;
        data = 0;
        height = 0;
    }

    public AVLNode(int n) {
        left = null;
        right = null;
        data = n;
        height = 0;
    }
}

class AVLTree {
    private AVLNode root;

    // Constructor for AVLTree
    public AVLTree() {
        root = null;
    }

    // Check if the tree is empty
    public boolean isEmpty() {
        return root == null;
    }

    // Make the tree empty
    public void makeEmpty() {
        root = null;
    }

    // Insert a node into the tree
    public void insert(int data) {
        root = insert(data, root);
    }

    // Height of the node
    private int height(AVLNode t) {
        return t == null ? -1 : t.height;
    }

    // Maximum of two integers
    private int max(int lhs, int rhs) {
        return lhs > rhs ? lhs : rhs;
    }

    // Insert a node and balance the tree
    private AVLNode insert(int x, AVLNode t) {
        if (t == null)
            t = new AVLNode(x);
        else if (x < t.data) {
            t.left = insert(x, t.left);
            if (height(t.left) - height(t.right) == 2) {
                if (x < t.left.data)
                    t = rotateWithLeftChild(t); // LL Rotation
                else
                    t = doubleWithLeftChild(t); // LR Rotation
            }
        } else if (x > t.data) {
            t.right = insert(x, t.right);
            if (height(t.right) - height(t.left) == 2) {
                if (x > t.right.data)
                    t = rotateWithRightChild(t); // RR Rotation
                else
                    t = doubleWithRightChild(t); // RL Rotation
            }
        }
        t.height = max(height(t.left), height(t.right)) + 1;
        return t;
    }

    // Rotate binary tree node with left child (LL Rotation)
    private AVLNode rotateWithLeftChild(AVLNode k2) {
        AVLNode k1 = k2.left;
        k2.left = k1.right;
        k1.right = k2;
        k2.height = max(height(k2.left), height(k2.right)) + 1;
        k1.height = max(height(k1.left), k2.height) + 1;
        return k1;
    }

    // Rotate binary tree node with right child (RR Rotation)
    private AVLNode rotateWithRightChild(AVLNode k1) {
        AVLNode k2 = k1.right;
        k1.right = k2.left;
        k2.left = k1;
        k1.height = max(height(k1.left), height(k1.right)) + 1;
        k2.height = max(height(k2.right), k1.height) + 1;
        return k2;
    }

    // Double rotation (LR Rotation) - Left Right
    private AVLNode doubleWithLeftChild(AVLNode k3) {
        k3.left = rotateWithRightChild(k3.left);
        return rotateWithLeftChild(k3);
    }

    // Double rotation (RL Rotation) - Right Left
    private AVLNode doubleWithRightChild(AVLNode k1) {
        k1.right = rotateWithLeftChild(k1.right);
        return rotateWithRightChild(k1);
    }

    // Count the number of nodes in the tree
    public int countNodes() {
        return countNodes(root);
    }

    private int countNodes(AVLNode r) {
        if (r == null)
            return 0;
        else {
            int l = 1;
            l += countNodes(r.left);
            l += countNodes(r.right);
            return l;
        }
    }

    // Search for a value in the tree
    public boolean search(int val) {
        return search(root, val);
    }

    private boolean search(AVLNode r, int val) {
        boolean found = false;
        while ((r != null) && !found) {
            int rval = r.data;
            if (val < rval)
                r = r.left;
            else if (val > rval)
                r = r.right;
            else {
                found = true;
                break;
            }
            found = search(r, val);
        }
        return found;
    }

    // In-order traversal
    public void inorder() {
        inorder(root);
    }

    private void inorder(AVLNode r) {
        if (r != null) {
            inorder(r.left);
            System.out.print(r.data + " ");
            inorder(r.right);
        }
    }

    // Pre-order traversal
    public void preorder() {
        preorder(root);
    }

    private void preorder(AVLNode r) {
        if (r != null) {
            System.out.print(r.data + " ");
            preorder(r.left);
            preorder(r.right);
        }
    }

    // Post-order traversal
    public void postorder() {
        postorder(root);
    }

    private void postorder(AVLNode r) {
        if (r != null) {
            postorder(r.left);
            postorder(r.right);
            System.out.print(r.data + " ");
        }
    }
}

public class AVLTreeTest {
    public static void main(String args[]) {
        Scanner scan = new Scanner(System.in);
        AVLTree avlt = new AVLTree();
        System.out.println("AVL Tree Test\n");

        char ch;
        do {
            System.out.println("\nAVL Tree Operations\n");
            System.out.println("1. Insert");
            System.out.println("2. Search");
            System.out.println("3. Count nodes");
            System.out.println("4. Check empty");
            System.out.println("5. Clear tree");
            int choice = scan.nextInt();
            switch (choice) {
                case 1:
                    System.out.println("Enter integer element to insert");
                    avlt.insert(scan.nextInt());
                    break;
                case 2:
                    System.out.println("Enter integer element to search");
                    System.out.println("Search result: " + avlt.search(scan.nextInt()));
                    break;
                case 3:
                    System.out.println("Node1s = " + avlt.countNodes());
                    break;
                case 4:
                    System.out.println("Empty status = " + avlt.isEmpty());
                    break;
                case 5:
                    System.out.println("\nTree cleared");
                    avlt.makeEmpty();
                    break;
                default:
                    System.out.println("Wrong entry \n");
                    break;
            }

            System.out.print("\nPost-order: ");
            avlt.postorder();
            System.out.print("\nPre-order: ");
            avlt.preorder();
            System.out.print("\nIn-order: ");
            avlt.inorder();
            System.out.println("\nDo you want to continue (Type y or n)\n");
            ch = scan.next().charAt(0);
        } while (ch == 'Y' || ch == 'y');
    }
}
