4.TSP
import java.util.Scanner;

public class TSP {
    int[][] a;
    int[] visited;
    int n, cost;

    TSP() {
        cost = 0;
        int i, j;
        a = new int[10][10];
        visited = new int[10];
        Scanner scan = new Scanner(System.in);

        // Input the number of cities
        System.out.print("Enter No. of Cities: ");
        n = scan.nextInt();

        // Input the cost matrix
        System.out.println("Enter Cost Matrix:");
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (i != j) {
                    System.out.print("Enter distance from " + (i + 1) + " to " + (j + 1) + ": ");
                    a[i][j] = scan.nextInt();
                }
            }
            visited[i] = 0;  // Initialize visited array
        }

        System.out.println();
        System.out.println("Starting node assumed to be node 1.");
        System.out.println("The Cost adjacency matrix is:");
        for (i = 0; i < n; i++) {
            System.out.println();
            for (j = 0; j < n; j++) {
                System.out.print(" " + a[i][j] + " ");
            }
        }
        System.out.println();
    }

    // Recursive function to find minimum cost
    void mincost(int city) {
        int ncity;
        visited[city] = 1;
        System.out.print((city + 1) + " -> ");
        ncity = least(city);

        if (ncity == 999) {
            ncity = 0;
            System.out.println((ncity + 1));
            cost += a[city][ncity];
            return;
        }
        mincost(ncity);
    }

    // Find the least cost unvisited city
    int least(int c) {
        int i, nc = 999;
        int min = 999, kmin = 0;

        for (i = 0; i < n; i++) {
            if ((a[c][i] != 0) && (visited[i] == 0)) {
                if (a[c][i] < min) {
                    min = a[i][0] + a[c][i];
                    kmin = a[c][i];
                    nc = i;
                }
            }
        }

        if (min != 999)
            cost += kmin;

        return nc;
    }

    // Output the minimum cost
    void put() {
        System.out.println("Minimum cost: " + cost);
    }

    // Main method to run the program
    public static void main(String[] args) {
        TSP t = new TSP();
        System.out.println("The Optimal Path is:");
        t.mincost(0);
        t.put();
    }
}
