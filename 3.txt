3. Heap & Quick

import java.util.Scanner;
import java.lang.*;

class HeapSort {
    static void heapify(int a[], int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if (left < n && a[left] > a[largest])
            largest = left;
        if (right < n && a[right] > a[largest])
            largest = right;
        if (largest != i) {
            int temp = a[i];
            a[i] = a[largest];
            a[largest] = temp;
            heapify(a, n, largest);
        }
    }

    static void heapSort(int a[], int n) {
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(a, n, i);
        for (int i = n - 1; i >= 0; i--) {
            int temp = a[0];
            a[0] = a[i];
            a[i] = temp;
            heapify(a, i, 0);
        }
    }

    static void printArr(int a[], int n) {
        for (int i = 0; i < n; ++i)
            System.out.print(a[i] + " ");
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter number of vertices:");
        int n = scanner.nextInt();
        int[] a = new int[n];
        System.out.println("Enter the adjacency matrix:");
        for (int i = 0; i < n; i++)
            // a[i] = scanner.nextInt();
            a[i] = (int) (Math.random() * 10) + 1;
        System.out.print("Before sorting array elements are - \n");
        printArr(a, n);
        long time = System.currentTimeMillis();
        heapSort(a, n);
        long timeNow = System.currentTimeMillis();
        System.out.print("\nAfter sorting array elements are - \n");

        printArr(a, n);
        System.out.println("\ntime required : " + (timeNow - time) + "ms");
    }
}



import java.util.Scanner;
import java.lang.*;

public class QuickSort {

    public static int partition(int a[], int start, int end) {
        int pivot = a[end]; // pivot element
        int i = (start - 1);

        for (int j = start; j <= end - 1; j++) {
            // If current element is smaller than the pivot
            if (a[j] < pivot) {
                i++; // increment index of smaller element
                int t = a[i];
                a[i] = a[j];
                a[j] = t;
            }
        }
        int t = a[i + 1];
        a[i + 1] = a[end];
        a[end] = t;
        return (i + 1);
    }

    /* function to implement quick sort */
    public static void quick(int a[], int start, int end) {
        if (start < end) {
            int p = partition(a, start, end); // p is the partitioning index
            quick(a, start, p - 1);
            quick(a, p + 1, end);
        }
    }

    /* function to print an array */
    public static void printArr(int a[], int n) {
        int i;
        for (i = 0; i < n; i++) {
            System.out.print(a[i] + " ");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter number of vertices:");
        int n = scanner.nextInt();
        int[] a = new int[n];
        System.out.println("Enter the adjacency matrix:");
        for (int i = 0; i < n; i++)
            a[i] = (int) (Math.random() * 10) + 1;
        System.out.println("Before sorting array elements are - \n");
        printArr(a, n);
        long time = System.currentTimeMillis();
        quick(a, 0, n - 1);
        long timeNow = System.currentTimeMillis();
        System.out.println("\nAfter sorting array elements are - \n");
        printArr(a, n);
        System.out.println("\ntime required : " + (timeNow - time) + "ms");
    }
}

